import{_ as i,c as a,o as t,al as e}from"./chunks/framework.BG_RlZPd.js";const c=JSON.parse('{"title":"同一台电脑管理多个 GitHub 账户","description":"","frontmatter":{"title":"同一台电脑管理多个 GitHub 账户","date":"2024-06-01","category":"工程化","tags":["git","github"],"abstract":"介绍如何在同一台电脑上生成多个 SSH 密钥，并管理不同的 GitHub 账户。"},"headers":[],"relativePath":"posts/github-accounts/index.md","filePath":"posts/github-accounts/index.md"}'),n={name:"posts/github-accounts/index.md"};function h(p,s,l,k,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="同一台电脑管理多个-github-账户" tabindex="-1">同一台电脑管理多个 GitHub 账户 <a class="header-anchor" href="#同一台电脑管理多个-github-账户" aria-label="Permalink to &quot;同一台电脑管理多个 GitHub 账户&quot;">​</a></h1><p>有时候，你可能需要在同一台机器上管理多个 GitHub 账户。</p><p>但是，就算你在电脑中生成了多个 SSH Key，电脑在连接远程仓库的时候，只能默认选择其中固定的一个 SSH 公钥来连接，并不会根据不同仓库的设置选择不同的密钥。</p><p>这就导致了一台电脑只能访问一个 GitHub 账户，如果访问另一个 GitHub 账户，在 push 时就会报错。</p><p>下面介绍如何在同一台电脑上管理不同的 GitHub 账户。</p><h2 id="_1-生成-ssh-密钥" tabindex="-1">1. 生成 SSH 密钥 <a class="header-anchor" href="#_1-生成-ssh-密钥" aria-label="Permalink to &quot;1. 生成 SSH 密钥&quot;">​</a></h2><p>在生成 SSH 密钥之前，我们可以检查一下当前电脑上是否有 SSH 密钥。</p><p><code>ls -al ~/.ssh</code> 命令可以列出所有的公钥和私钥对。</p><p>如果 <code>~/.ssh/id_rsa</code> 存在且可用的话，我们可以使用它。否则我们可以先通过运行以下命令来生成一个默认的密钥：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span></span></code></pre></div><p>对于保存密钥的位置，按回车默认接受即可，它将默认保存在 <code>~/.ssh/</code> 目录中。让我们为个人账户使用这个默认的密钥对。</p><p>而对于工作账户，我们将使用下面的命令来创建不同的 SSH 密钥：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;email@work_mail.com&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;id_rsa_work_user1&quot;</span></span></code></pre></div><p>至此，我们已经有了两个不同的密钥：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>~/.ssh/id_rsa</span></span>
<span class="line"><span>~/.ssh/id_rsa_work_user1</span></span></code></pre></div><h2 id="_2-将-ssh-密钥添加到相应的-github-账户中" tabindex="-1">2. 将 SSH 密钥添加到相应的 GitHub 账户中 <a class="header-anchor" href="#_2-将-ssh-密钥添加到相应的-github-账户中" aria-label="Permalink to &quot;2. 将 SSH 密钥添加到相应的 GitHub 账户中&quot;">​</a></h2><p>我们已经准备好了 SSH 公钥，我们将要求 GitHub 账户信任我们创建的密钥。这是为了避免每次进行 Git 推送时都要输入用户名和密码的麻烦。</p><p>复制公钥 <code>pdcopy &lt; ~/.ssh/id_rsa.pub</code>，然后登录你的个人 GitHub 账户：</p><ul><li>转到【Settings】</li><li>在左边的菜单中选择【SSH and GPG keys】</li><li>点击【New SSH key】，提供一个合适的标题，并将密钥粘贴在下面的方框中</li><li>点击【Add key】，就完成了</li></ul><p>对于工作账户，使用相应的公钥 <code>pdcopy &lt; ~/.ssh/id_rsa_work_user1.pub</code>，在 GitHub 工作账户中重复上述步骤。</p><h2 id="_3-在-ssh-agent-上注册新的-ssh-密钥" tabindex="-1">3. 在 ssh-agent 上注册新的 SSH 密钥 <a class="header-anchor" href="#_3-在-ssh-agent-上注册新的-ssh-密钥" aria-label="Permalink to &quot;3. 在 ssh-agent 上注册新的 SSH 密钥&quot;">​</a></h2><p>为了使用这些密钥，我们必须在我们电脑上的 ssh-agent 上注册它们。</p><p>如果你是使用的 Mac，执行下面命令确保 ssh-agent 运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span></code></pre></div><p>然后执行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa_work_user1</span></span></code></pre></div><p>就可以把密钥添加到 ssh-agent 中了。</p><p>如果你是使用的 Windows，打开 Git Bash 命令行，依次执行下面的命令添加：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa_work_user1</span></span></code></pre></div><h2 id="_4-让-ssh-agent-为不同的-ssh-主机使用各自的-ssh-密钥" tabindex="-1">4. 让 ssh-agent 为不同的 SSH 主机使用各自的 SSH 密钥 <a class="header-anchor" href="#_4-让-ssh-agent-为不同的-ssh-主机使用各自的-ssh-密钥" aria-label="Permalink to &quot;4. 让 ssh-agent 为不同的 SSH 主机使用各自的 SSH 密钥&quot;">​</a></h2><p>这是最关键的部分，我们有两种不同的方法。</p><p>一种是使用 SSH 配置文件。另一种是让 ssh-agent 每次只有一个有效的 SSH 密钥。</p><h3 id="方法一-创建-ssh-配置文件" tabindex="-1">方法一：创建 SSH 配置文件 <a class="header-anchor" href="#方法一-创建-ssh-配置文件" aria-label="Permalink to &quot;方法一：创建 SSH 配置文件&quot;">​</a></h3><p>在这里，我们实际上是为不同的主机添加 SSH 配置规则，说明在哪个域名使用哪个身份文件。</p><p>SSH 配置文件将在 <code>~/.ssh/config</code> 中。如果有的话，请编辑它，否则我们可以直接创建它。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # Creates the file if not exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Opens the file in VS code, use any editor</span></span></code></pre></div><p>在 config 文件中为相关的 GitHub 账号做类似于下面的配置项：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Personal account, - the default config</span></span>
<span class="line"><span>Host github.com</span></span>
<span class="line"><span>  HostName github.com</span></span>
<span class="line"><span>  User git</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Work account-1</span></span>
<span class="line"><span>Host github.com-work_user1</span></span>
<span class="line"><span>  HostName github.com</span></span>
<span class="line"><span>  User git</span></span>
<span class="line"><span>  IdentityFile ~/.ssh/id_rsa_work_user1</span></span></code></pre></div><p><code>work_user1</code> 是工作账户的 GitHub 用户 ID。<code>github.com-work_user1</code> 是用来区分多个 Git 账户的记号。你也可以使用 <code>work_user1.github.com</code> 记号。确保与你使用的主机名记号一致。当你克隆一个仓库货为本地仓库设置 <code>remote_origin</code> 时，这一点很重要。</p><p>上面的配置要求 ssh-agent：</p><ul><li>对任何使用 <code>@github.com</code> 的 Git URL 使用 <code>id_rsa</code> 密钥</li><li>对任何使用 <code>@github.com-work_user1</code> 的 Git URL 使用 <code>id_rsa_work_user1</code> 密钥</li></ul><h3 id="方法二-在-ssh-agent-中每次有一个活跃的-ssh-密钥" tabindex="-1">方法二：在 ssh-agent 中每次有一个活跃的 SSH 密钥 <a class="header-anchor" href="#方法二-在-ssh-agent-中每次有一个活跃的-ssh-密钥" aria-label="Permalink to &quot;方法二：在 ssh-agent 中每次有一个活跃的 SSH 密钥&quot;">​</a></h3><p>这种方法不需要 SSH 配置规则（即不需要 <code>~/.ssh-config</code> 文件）。</p><p>我们手动确保在进行任何 Git 操作时，ssh-agent 中只有相关的密钥。</p><p><code>ssh-add -l</code> 命令会列出所有连接到 ssh-agent 的 SSH 密钥。把它们全部删掉，然后添加你要用的那个密钥即可。比如，要推送到个人的 Git 账号，可以执行如下命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # removes all ssh entries from the ssh-agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Adds the relevant ssh key</span></span></code></pre></div><p>目前，ssh-agent 已经将密钥映射到工作的 GitHub 账户，你可以将 Git 推送到工作仓库，不过需要一点手动操作。</p><h2 id="_5-在本地仓库设置-git-remote-url" tabindex="-1">5. 在本地仓库设置 git remote url <a class="header-anchor" href="#_5-在本地仓库设置-git-remote-url" aria-label="Permalink to &quot;5. 在本地仓库设置 git remote url&quot;">​</a></h2><p>一旦我们克隆/创建了本地的 Git 仓库，确保 Git 配置的用户名和电子邮件正是你想要的。GitHub 会根据提交（commit）描述所附的电子邮件 ID 来识别任何提交的作者。</p><p>要列出本地 Git 目录中的配置名称和电子邮件，请执行 <code>git config user.name</code> 和 <code>git config user.email</code>。如果没有找到，可以进行更新：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;User 1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Updates git config user name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;user1@workMail.com&quot;</span></span></code></pre></div><h2 id="_6-克隆仓库" tabindex="-1">6. 克隆仓库 <a class="header-anchor" href="#_6-克隆仓库" aria-label="Permalink to &quot;6. 克隆仓库&quot;">​</a></h2><p>现在配置已经好了，我们可以克隆相应的仓库了。在克隆时，注意我们要使用在 SSH 配置中使用的主机。</p><p>要克隆个人仓库，使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:personal_account_name/repo_name.git</span></span></code></pre></div><p>要克隆工作仓库，使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com-work_user1:work_user1/repo_name.git</span></span></code></pre></div><p>这个变化取决于 <code>~/.ssh/config</code> 文件中的 Host 配置项（不是 HostName！！），<code>@</code> 和 <code>:</code> 之间的字符串应该与我们在 SSH 配置文件中给出的内容相匹配。</p><h2 id="_7-对于本地存在的版本库" tabindex="-1">7. 对于本地存在的版本库 <a class="header-anchor" href="#_7-对于本地存在的版本库" aria-label="Permalink to &quot;7. 对于本地存在的版本库&quot;">​</a></h2><ul><li><p>如果有已经克隆的仓库</p><p>可以使用 <code>git remote -v</code> 命令来列出该仓库的 Git remote。</p><p>然后检查该 URL 是否与我们要使用的 GitHub 主机相匹配，如果不匹配，就更新 remote origin URL：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com-worker_user1:worker_user1/repo_name.git</span></span></code></pre></div><p>确保 <code>@</code> 和 <code>:</code> 之间的字符串与我们在 SSH 配置中给出的主机一致。</p></li><li><p>如果要在本地创建新仓库</p><p>使用 <code>git init</code> 命令在项目文件夹中初始化 Git。</p><p>在 GitHub 账户中创建新的仓库，然后将其作为 Git remote 添加给本地仓库：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com-work_user1:work_user1/repo_name.git</span></span></code></pre></div><p>确保 <code>@</code> 和 <code>:</code> 之间的字符串与我们在 SSH 配置中给出的主机一致。</p><p>推送初始提交到 GitHub 仓库：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Initial commit&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li></ul>`,60)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
